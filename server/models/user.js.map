{"version":3,"sources":["models/user.ts"],"names":[],"mappings":";;;;;;AAAA,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AACtC,IAAO,MAAM,WAAW,eAAe,CAAC,CAAC;AAEzC;IAAyB,8BAAe;IAAxC;QAAyB,8BAAe;IAaxC,CAAC;IAVG,oBAAoB;IACb,iCAAY,GAAnB,UAAoB,QAAe;QACjC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,gCAAgC;IACzB,kCAAa,GAApB,UAAqB,QAAe;QAChC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;IAEL,iBAAC;AAAD,CAbA,AAaC,CAbwB,QAAQ,CAAC,MAAM,GAavC;AAED,2BAA2B;AAC3B,IAAI,UAAU,GAAc,IAAI,UAAU,CAAC;IACvC,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,sBAAsB;KACnC;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,sBAAsB;KACnC;IACD,KAAK,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,mBAAmB;KAChC;IACD,WAAW,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,0BAA0B;KACvC;IACD,OAAO,EAAE;QACL,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KACpB;IACD,OAAO,EAAE;QACL,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KACpB;CACJ,EACG,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;AAGhC,gDAAgD;AACrC,YAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC","file":"models/user.js","sourcesContent":["import mongoose = require('mongoose');\nimport bcrypt = require('bcrypt-nodejs');\n\nclass UserSchema extends mongoose.Schema {\n    public password:string;\n    \n    // Generating a Hash\n    public generateHash(password:string):string {\n      return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n    }\n    \n    // Checking if password is valid\n    public validPassword(password:string) {\n        return bcrypt.compareSync(password, this.password);\n    }\n    \n}\n\n// DEFINE THE OBJECT SCHEMA\nvar userSchema:UserSchema = new UserSchema({\n    username: {\n        type: String,\n        default: '',\n        trim: true,\n        required: 'username is required'\n    },\n    password: {\n        type: String,\n        default: '',\n        trim: true,\n        required: 'password is required'\n    },\n    email: {\n        type: String,\n        default: '',\n        trim: true,\n        required: 'email is required'\n    },\n    displayName: {\n        type: String,\n        default: '',\n        trim: true,\n        required: 'Display Name is required'\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    updated: {\n        type: Date,\n        default: Date.now\n    }\n},\n    { collection: 'userInfo' });\n\n\n// MAKE THIS PUBLIC SO THE CONTROLLER CAN SEE IT\nexport var User = mongoose.model('User', userSchema);"],"sourceRoot":"/source/"}